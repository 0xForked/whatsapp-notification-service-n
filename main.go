package main

import (
	"fmt"
	"github.com/Rhymen/go-whatsapp"
	_httpHandler "github.com/aasumitro/wagorf/src/delivery/http"
	"github.com/aasumitro/wagorf/src/delivery/http/configs"
	_httpMiddleware "github.com/aasumitro/wagorf/src/delivery/http/middleware"
	_service "github.com/aasumitro/wagorf/src/service"
	"github.com/aasumitro/wagorf/utils"
	"github.com/gofiber/fiber/v2"
	"os"
	"strconv"
	"time"

	// docs are generated by Swag CLI, you have to import them.
	_ "github.com/aasumitro/wagorf/docs" // load API Docs files (Swagger)
)

func init() {
	if os.Getenv("SERVER_URL") == "" {
		exitF("SERVER_URL env is required")
	}
	if os.Getenv("SERVER_READ_TIMEOUT") == "" {
		exitF("SERVER_READ_TIMEOUT env is required")
	}
	if os.Getenv("JWT_SECRET_KEY") == "" {
		exitF("JWT_SECRET_KEY env is required")
	}
	if os.Getenv("JWT_SECRET_KEY_EXPIRE_MINUTES") == "" {
		exitF("JWT_SECRET_KEY_EXPIRE_MINUTES env is required")
	}
	if os.Getenv("WHATSAPP_CLIENT_VERSION_MAJOR") == "" {
		exitF("WHATSAPP_CLIENT_VERSION_MAJOR env is required")
	}
	if os.Getenv("WHATSAPP_CLIENT_VERSION_MINOR") == "" {
		exitF("WHATSAPP_CLIENT_VERSION_MINOR env is required")
	}
	if os.Getenv("WHATSAPP_CLIENT_VERSION_BUILD") == "" {
		exitF("WHATSAPP_CLIENT_VERSION_BUILD env is required")
	}
	if os.Getenv("WHATSAPP_CLIENT_SESSION_PATH") == "" {
		exitF("WHATSAPP_CLIENT_SESSION_PATH env is required")
	}
}

// @title Go Whatsapp Rest API
// @version 1.0
// @description Golang, Fiber, Whatsapp and Swagger docs in isolated Docker containers.
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email hello@aasumitro.id
// @BasePath /api
func main() {
	wac, err := whatsapp.NewConnWithOptions(&whatsapp.Options{
		//timeout
		Timeout: 20 * time.Second,
		//Proxy:   proxy,
		//set custom client name
		ShortClientName: "wagorf",
		LongClientName:  "WhatsApp REST API",
	}); if err != nil {
		exitF("WhatsApp connection error: ", err)
	}

	waClientVerMajInt, err := strconv.Atoi(os.Getenv("WHATSAPP_CLIENT_VERSION_MAJOR")); if err != nil {
		exitF("Error conversion", err)
	}

	waClientVerMinInt, err := strconv.Atoi(os.Getenv("WHATSAPP_CLIENT_VERSION_MINOR")); if err != nil {
		exitF("Error conversion", err)
	}

	waClientVerBuildInt, err := strconv.Atoi(os.Getenv("WHATSAPP_CLIENT_VERSION_BUILD")); if err != nil {
		exitF("Error conversion", err)
	}

	wac.SetClientVersion(waClientVerMajInt, waClientVerMinInt, waClientVerBuildInt)

	whatsappService := _service.NewWhatsAppService(wac)

	//Restore session if exists
	err = whatsappService.RestoreSession(); if err != nil {
		exitF("Error restoring whatsapp session. ", err)
	}

	// Define Fiber config.
	config := configs.FiberConfig()
	app := fiber.New(config)

	// Swagger handler
	_httpHandler.NewSwaggerHandler(app)

	middleware := _httpMiddleware.InitMiddleware(app)
	app.Use(middleware.CORS())
	app.Use(middleware.LOGGER())

	// router for public access
	publicRoutes := app.Group("/api/v1")

	// router for private access
	privateRoutes := app.Group("/api/v1/auth", middleware.JWT())

	_httpHandler.NewWhatsappHandler(whatsappService, publicRoutes, privateRoutes)

	utils.StartServer(app)
}

func exitF(s string, args ...interface{}) {
	errorF(s, args...)
	os.Exit(1)
}

func errorF(s string, args ...interface{}) {
	_, err := fmt.Fprintf(os.Stderr, s+"\n", args...); if err != nil {
		return
	}
}
